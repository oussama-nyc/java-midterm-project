Please answer the below core-java Questions:

1-What is programing language?
A programming language is a formal language used by programmers to write instructions
that computers can understand and execute. It allows programmers to express algorithms
and ideas in a way that computers can process, making it possible to create software,
applications, and systems. Popular programming languages include Python, Ruby, Java,
JavaScript, C, C++, and C#, each with its own unique syntax, features, and applications.

2-What jdk contains or composed of and define each components?
1- JRE (Java Runtime Environment): The JRE provides a runtime environment for Java programs to run.
It includes the JVM, Java class libraries, and other necessary files to run Java programs.
JVM (Java Virtual Machine): The JVM is a virtual machine that runs Java bytecode.
It translates bytecode into machine code, allowing Java programs to run on any platform.
2- Development tools: JDK includes several tools for software development.
-Compiler (javac): The compiler converts Java source code into bytecode,
 which can be executed by the JVM.
-Debugger (JDB): The debugger helps developers identify and fix errors in their code.
-Documentation generator (Javadoc): The Javadoc tool generates HTML documentation for Java code.
-Archiver (jar): The archiver is used to create and manage Java Archive (JAR) files,
 which are used to package Java classes and resources into a single file.

3-What is IDE?
IDE stands for Integrated Development Environment, it is a software that contains the necessary
tools for developers in one place, such as an editor, debugger, compiler.
It allows developing software in any programming language without spending much time on language syntax.

4-What are the IDEs available in the market to support java?
-Eclipse
-IntelliJ IDEA
-NetBeans
-JDeveloper
-BlueJ
-Oracle JDeveloper
-JCreator
-MyEclipse
-CodeMix
-Visual Studio Code with Java Extension Pack
-DrJava
-Spring Tool Suite
-CodeReady Studio
-Android Studio (for Android development with Java/Kotlin)

5-Explain the entire java life cycle.
The Java life cycle is the process that a Java program goes through from the point when
we type the source code in a text editor to the point that the source code is converted
into machine code.
There are three main stages in the life cycle of a Java program:
- a) Editing the program: In this stage, we use a text editor (such as Notepad, Notepad++, or any IDE)
to create the Java source code. The source code is then saved with a .java extension and given
the same name as the class name we just created.
- b) Compiling the source code: In this stage, we use a Java compiler (such as javac) to convert
the source code file to a .class file which contains bytecode that is platform-independent.
- c) Executing the byte code: In this stage, the bytecode generated by the compiler will be executed
by the Java Virtual Machine (JVM). The input to the JVM is bytecode,and the output is machine code (0's and 1's).

6) what is class?
A class is a blueprint from which objects are created. It is a logical entity.
A class is also defined as a group of objects which have common properties.


7) What is object?
Object is an instance of a class in JAVA.
Each object has an identity, a behavior and a state. The state of an object is stored in fields (variables),
while methods (functions) display the object's behavior.


8) What is the entry point of an application?
The main() method is the entry point for a Java program. It is the first method that is
invoked when a Java program is run.


9)Why main is static?
so that it can be called without creating any instance(object).
There is no object of the class available at the time of starting java runtime, because of that,
we have to define the main() method as static.


10) Which class is the superclass of all classes?
The Object class, which is stored in the java. lang package, is the ultimate superclass of all Java classes.
If a class does not extend any other class then it is a direct child class of Object and if it extends another
class then it is indirectly derived. Therefore the Object class methods are available to all Java classes.


11) What is the difference between path and classpath variables?
The path environment variable is used to specify the set of directories which contains executional programs.
Path is set for java tools in java programs like java and javac.
CLASSPATH is an environment variable which is used by Application ClassLoader to locate and load
the .class files. The CLASSPATH defines the path.


12) What is the difference between an Interface and Abstract class?
Abstract class and interface both are used to achieve abstraction where we can declare the abstract methods.
Abstract class and interface both can't be instantiated.
Abstract class can have abstract and non-abstract methods while Interface can have only abstract methods.
Abstract class doesn't support multiple inheritance while Interface supports multiple inheritance.
Abstract class can have final, non-final, static and non-static variables while Interface has only
static and final variables.
Abstract class can provide the implementation of interface while Interface can't provide the implementation
of abstract class.
An abstract class can extend another Java class and implement multiple Java interfaces while
interface can extend another Java interface only.
A Java abstract class can have class members like private, protected, etc. Members of a Java interface are public by default.


13) Can you make an Object from an Interface and Abstract class ? if not how do you use it ?
No, we can't create an object of an abstract class or interface.
we must implement a subclass of abstract class which, of course, must not be abstract to use it.
For interface, we must create a class which implement the interface and implement bodies of interface methods.


14) what is Access Specifier?
Access Specifier/modifier defines how the members (attributes and methods) of a class can be accessed.
we have 4 class modifiers: public, protected, default, and private.

15) What is OOP ? Define each feature of java OOP.
OOP in java stands for object-oriented programming,
OOP is faster and easier to execute.
OOP provides a clear structure for the programs.
OOP helps to keep the Java code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug.
OOP makes it possible to create full reusable applications with less code and shorter development time.
The main principles of OOP are:

1.Abstraction:
It is the process of hiding certain details and showing only essential information to the user.
Abstraction can be achieved with either abstract classes or interfaces.

2.Encapsulation:
It is a process of wrapping code and data together into a single unit.
is a way to restrict the direct access to some components of an object,
so users cannot access state values for all of the variables of a particular object.
Achieved by declaring class variables/attributes as private then providing a
public get and set methods to access and update the value of a private variable.

3.Inheritance:
It is the mechanism by which one class inherits the features of another class.
It is achieved by creating a new class(child class) that inherits from a preexisting class(parent class)
so we can reuse the methods and fields of that class. In addition, we can add new fields and methods to
the current child class as well. we use the keyword extends.

4.Polymorphism:
Polymorphism allows us to perform a single action in different ways, it is achieved by 2 principles:
a)Method Overloading: it occurs when two or more methods in one class have the same method name but different type,
 number or order of parameters.
b)Method overriding: it is only possible through inheritance, it occurs when two methods have the same method
name and parameters, one of the methods is in the parent class, and the other is in the child class.


16)What is Java Package and which package is imported by default?
Package in Java is a mechanism to encapsulate a group of related classes, sub packages and interfaces.
Like a folder in a file directory, We use packages to avoid name conflicts, and to control the access of class,
interface, sub-classes, etc. and to write a better maintainable code.
Packages are divided into two categories:
a)Built-in Packages (packages from the Java API)
b)User-defined Packages (create your own packages)
Java compiler imports java. lang package internally by default.
It provides the fundamental classes that are necessary to design a basic Java program.


17)What is API? Name list of API that you have used so far.
An application programming interface (API) is a set of defined rules that explain how computers or
applications communicate with one another. APIs sit between an application and the web server, acting as
an intermediary layer that processes data transfer between systems.
Java API: The pre-integrated software components used for establishing a communication between
desired software/platforms/components.


18)Does java support multiple inheritance, explain why or why not?
Multiple inheritance is not supported by Java using classes, the reason behind this is to prevent ambiguity.
For example if a class C extends class A and Class B that have the same method display(), the java compiler
cannot decide, which display method it should inherit.
Note that multiple inheritance is supported in interfaces. A single interface can extend multiple interfaces.
A class can implement more than one interface, using the implement keyword, but it can only extend one class.


19)What is method overloading and when it happens?
 It is a feature that allows a class to have multiple methods in one class with the same method name but
 different type, number or sequence of parameters.


20)Explain exceptions in java and how to handle it.
It is an event, which occurs during the execution of a program, that disrupts the normal flow of
 the program's instructions.
There are two types of exceptions in Java as follows:
Checked exception(compile time): checked by the compiler during the compilation process, it is handled by
enclosing the code in a try-catch block or using the throws keyword.
Unchecked exception(runtime): it is an exception that occurs at the time of execution, it can be handled
by placing the code within a try-catch block and the error can be caught inside the catch block.


21)What is static keyword in java? How it has been used in variables and methods ?
The static keyword in Java is mainly used for memory management.
Static keyword can be used with class, variable, method and block.
Static members belong to the class instead of a specific instance, this means if we make a member static,
we can access it without object.
A static method can only access static variables; it cannot access instance variables directly.
non-static methods and non-static variables can only be accessed using objects.
Non-static methods can access any static method and any static variable without creating an instance of the class.
A static variable is common to all the instances (or objects) of the class because it is a class level variable.
In other words only a single copy of static variable is created and shared among all the instances of the class.


22)What is final and how it has been used for variables and methods?
final keyword  is a non-access modifier applicable only to a variable, a method, or a class.
When a variable is declared final, its value can’t be modified.
We must initialize a final variable, otherwise, the compiler will throw a compile-time error.
A final variable can only be initialized once.
When a method is declared with final keyword, it is called a final method. A final method cannot be overridden
if inherited to another class.
When a class is declared with final keyword, it is called a final class. A final class cannot be extended(inherited).


23)What is final, finally and finalize?
Final is a keyword and is used as a non-access modifier in Java.
Finally is a block in Java used for Exception Handling.
Finalize is a method in Java used for Garbage Collection.


24)What is a constructor ?
A constructor in Java is a special method that is used to initialize objects.
The constructor is called when an object of a class is created.
It can be used to set initial values for object attributes.
The constructor name must match the class name, and it cannot have a return type.
All classes have constructors by default.


25)Can we have multiple constructors in a class?
We can have multiple constructors in a class with same name, as long as each has a different arguments.
This is known as constructor overloading.


26) If we don't have a constructor declared, what is called during the object creation?
If a class does not explicitly declare any, the Java compiler automatically
provides a no-argument constructor, called the default constructor.


27)What is "this" keyword in java ?
The this keyword can be used to refer current class instance variable.
If there is ambiguity between the instance variables and parameters, this keyword resolves the problem of ambiguity.


28)What is "super" keyword in java? How many possible way can you use?
The super keyword refers to superclass (parent) objects.
It is used to call superclass members (attributes, constructors and methods).
The most common use of the super keyword is to eliminate the confusion between superclasses and subclasses
that have methods with the same name.


29)What is JVM stand for ?
JVM stands for Java Virtual Machine.


30) Is JVM platform independent?
JVM is platform dependent, which means users will need different JVM for each OS platform.


31)What version of java are you using?
JAVA Standard Edition(SE) 11.


32)What is JAR stand for ?
JAR stands for Java ARchive.
It's a file format based on the popular ZIP file format and is used for aggregating many files into one.


33) What is the difference between JDK and JVM?
Java Development Kit (JDK) is a software development environment used for making applets and Java applications.
It contains the Java Runtime Environment (JRE) and developer tools(compiler, debugger...)
Java Virtual Machine (JVM) is an engine that provides a runtime environment to drive the Java Code or applications.
It converts Java bytecode into machine language. JVM is a part of Java Run Environment (JRE).


34) What is the difference between JVM and JRE?
Java Runtime Environment (JRE) is a software bundle which provides Java class libraries with
necessary components to run Java code.
JVM executes Java byte code and provides an environment for executing it. JVM is a subset of JRE.
It is the Java platform component that executes source code.


35)What is compile time and run time?
Compile time is the period when the programming code is converted to the machine code (i.e. binary code).
Runtime is the period of time when a program is running and generally occurs after compile time.


36)What is heap?
The Java heap is the area of memory used to store objects instantiated by applications running on the JVM.
When the JVM is started, heap memory is created and any objects in the heap can be shared between threads
as long as the application is running.


37)How java manage its memory?
Memory management is the process of allocating new objects and removing unused objects to
make space for those new object allocations, which reside in areas called Stack and Heap.
Java has an automatic memory deallocation system known as Garbage Collector.


38)What is the difference between String, StringBuffer and StringBuilder?
Java provides three classes to represent a sequence of characters: String, StringBuffer, and StringBuilder.
The String class is an immutable class whereas StringBuffer and StringBuilder classes are mutable.
StringBuffer is synchronized i.e. thread safe. It means two threads can't call the methods of StringBuffer simultaneously.
StringBuilder is non-synchronized i.e. not thread safe. Two threads can call the methods of StringBuilder simultaneously.


39)What is Singleton class?
a singleton class is a class that can have only one object (an instance of the class) at a time.
It is achieved by:
a) making the constructor private.
b) Declaring a static method that has the return type object of this singleton class.


40)What is Serialization and Deserialization?
Serialization is a mechanism of converting the state of an object into a byte stream.
Deserialization is the reverse process where the byte stream is used to recreate the actual Java object in memory.


41)when to use transient variable in java?
transient is a variables modifier used in serialization. At the time of serialization,
if we don't want to save value of a particular variable in a file, then we use transient keyword.
When JVM comes across transient keyword, it ignores original value of the variable and save default
value of that variable data type.


42)Difference between while and do..while loop?
In the while loop the condition is checked prior to executing any statements whereas in the case of do while loop,
statements are run at least once, and then the condition is verified.


43)What is Enum?
An enum type is a special data type that enables for a variable to be a set of predefined constants.
The variable must be equal to one of the values that have been predefined for it.

44)What is Iterator?
Iterator is one of the Java cursors. Java Iterator is an interface that is practiced
in order to iterate over a collection of Java object components entirety one by one.
It belongs to java.util package.


45)Which one will take more memory, an int or Integer?
Integer takes more memory.
An int is a primitive data type and takes 32 bits(4 bytes) to store.
On other hand Integer is an object which takes 128 bits (16 bytes) to store its int value.


46)Why is String Immutable in Java?
String is immutable meaning it cannot be modified once it is created.
We can only change the reference to the object. We restrict to change the object itself.
The String is immutable in Java because of the security, synchronization and concurrency, caching, and class loading.
The biggest benefit is that the same string object will be shared for multiple references.
This allows saving a lot of memory which makes efficient memory usage.
The String objects are cached in the String pool, and it makes the String immutable.


47)What is constructor chaining in Java?
Constructor chaining refers to the ability to call a constructor inside another constructor.
One of the main use of constructor chaining is to avoid duplicate codes while having multiple constructor.


48)The difference between Serial and Parallel Garbage Collector?
The serial collector uses a single thread to perform all garbage collection work, which makes it
relatively efficient because there is no communication overhead between threads.
It's best-suited to single processor machines.
The parallel collector has multiple threads that are used to speed up garbage collection.
The parallel collector is intended for applications with medium-sized to large-sized data sets that
are run on multiprocessor or multithreaded hardware.


49)What is JIT stands for?
JIT stands for Just-In-Time.
JIT compiler is an integral part of the JVM and a component of the Java Runtime Environment.
It improves the performance of Java applications at run time.


50)Explain Java Heap space and Garbage collection?
Java objects reside in an area called the heap.
The heap is created when the JVM starts up and may increase or decrease in size while the application runs.
When the heap becomes full, garbage is collected.
During the garbage collection objects that are no longer used are cleared, thus making space for new objects.


51)Can you guarantee the garbage collection process?
We cannot force the garbage collector to collect the garbage.
It depends on the JVM, JVM controls the garbage collector and decides when to perform the garbage collection.
We can request to the JVM to run the garbage collector, but there is no guarantee under any conditions
that the JVM will comply.
JVM runs the garbage collector if it senses that memory is running low.


52)What is the difference between stack and heap in Java?
the stack is used to store the order of method execution and local variables while the heap memory stores the objects
and it uses dynamic memory allocation and de-allocation.


53)What is reflection in java and why is it useful?
Reflection is an API that is used to examine or modify the behavior of methods, classes, and interfaces at runtime.
The required classes for reflection are provided under java.lang.reflect package.
Reflection is mainly used in debugging tools, JUnit, and frameworks to inspect and change the behavior at runtime,
IDEs (Integrated Development Environment) and test tools etc.

54) what is multithreading in java?
Multithreading refers to a process of executing two or more threads simultaneously for maximum utilization of the CPU.


55) What is the use of synchronization in Java?
Synchronization in java is the capability to control the access of multiple threads to any shared resource.
In the Multithreading concept, multiple threads try to access the shared resources at a time to produce
inconsistent results.
The synchronization is necessary for reliable communication between threads.


56) What is Framework?
Framework are the bodies that contains the pre-written codes (classes and functions) in which we can
add our code to overcome the problem.
In Java, Framework is a collection of predefined classes and functions that is used to process input,
manage hardware devices and interacts with system software.
It acts like a skeleton that helps the developer to develop an application by writing their own code.


57)What are the testing Framework available in java?
1. Selenium
2. JUnit
3. TestNG
4. SerenityBDD
5. Mockito


58)Difference between jUnit and testNG?
JUnit is a framework that is open-source and may be used to write and trigger tests.
TestNG is a Java-based framework that provides an improved way to run tests.


59)What are the dependencies for this project?
MySQL Connector/J
MongoDB Java Driver
junit



60)what is dependency injection in java?
Dependency Injection in Java is a way to achieve Inversion of control (IoC) in our application by moving objects
binding from compile time to runtime. We can achieve IoC through Factory Pattern, Template Method Design Pattern,
Strategy Pattern and Service Locator pattern too.


61)What is static binding and dynamic binding?
When type of the object is determined at compiled time(by the compiler), it is known as static binding.
If there is any private, final or static method in a class, there is static binding.
When type of the object is determined at run-time, it is known as dynamic binding.
