Please answer the below Data Structure Questions:

1) why do we need data structure?
Data Structures are necessary for designing efficient algorithms.
It provides reusability and abstraction.
Using appropriate data structures can help programmers save a good amount of time while performing
operations such as storage, retrieval, or processing of data.
Manipulation of large amounts of data is easier.


2) What are the various operations that can be performed on different Data Structures?
1.Traversing: Traversing a Data Structure means to visit the element stored in it.
2.Searching: Searching means to find a particular element in the given data-structure.
3.Insertion: it is adding an element in the given data structure.
4.Deletion: it is deleting an element in the given data structure.
5.Sorting: The process of arranging the data structure in a specific order is known as Sorting.
6.Merging: Combining the data of two different sorted files into a single sorted file.


3) List out the areas in which data structures are applied extensively?
Compiler Design,
Operating System,
Database Management System,
Statistical analysis package,
Numerical Analysis,
Graphics,
Artificial Intelligence,
and Simulation.


4) what is an Array?
Java array is an object or a data structure which contains elements of a similar data type.
The elements of an array are stored in a contiguous memory location.
We can store only a fixed set of elements in a Java array.
Array in Java is index-based, the first element of the array is stored at the 0th index,
2nd element is stored on 1st index and so on.


5) what is the difference between the Array and ArrayList?
array and ArrayList are both data structures. An array is a basic functionality provided by Java,
whereas ArrayList is a class of Java Collections framework. It belongs to java.util package.
An array is a dynamically-created object. It serves as a container that holds the constant number of values of the same type.
Once an array is created, we cannot change its size.
ArrayList is a class of Collections framework.
The resize operation in ArrayList slows down the performance as it involves new array and copying content
from an old array to a new array.
We cannot store primitive type in ArrayList. So, it stores only objects.
It automatically converts primitive type to object.


6) what is LinkedList?
Linked List is a linear data structure, and can be defined as collection of objects called nodes that are
randomly stored in the memory, the elements are not stored at contiguous memory locations.
A node contains two fields i.e. data stored at that particular address and the pointer which contains
the address of the next node in the memory. The elements in a linked list are linked using the pointers.
The last node of the list contains pointer to the null.


7)How is an Array different from Linked List?
An array is a collection of elements of a similar data type.
A linked list is a collection of objects known as a node where node consists of two parts, i.e.,
data and address.
Array elements store in a contiguous memory location.
Linked list elements can be stored anywhere in the memory or randomly stored.
Array works with a static memory which means that the memory size is fixed.
The Linked list works with dynamic memory. which means that the memory size can be changed.
Array elements are independent of each other.
Linked list elements are dependent on each other.


8) what is queue?
A queue can be defined as an ordered list which enables insert operations to be performed at one
end called REAR and delete operations to be performed at another end called FRONT.
Queue is referred to be as First In First Out list (FIFO).


9) what is stack?
A Stack is a linear data structure that follows the LIFO (Last-In-First-Out) principle. Stack has one end.
It contains only one pointer top pointer pointing to the topmost element of the stack.
Whenever an element is added in the stack, it is added on the top of the stack, and the element
can be deleted only from the stack.


10) what is FIFO and LIFO?
LIFO stands for Last In First Out, in which we will enter the data elements into the data structure.
Here, we will pop out the data elements which are recently added.
The data structure, based on the LIFO principle, is stack.
FIFO stands for First In First Out, in which we will enter the data elements into the data structure;
the data element added at last in any data structure will be removed out last and the element added
first will be removed first.
The data structure, based on the FIFO principle, is the queue.


11) what is the order of complexity?
The most common complexity classes are (in ascending order of complexity): O(1), O(log n), O(n), O(n log n), O(n²).


12) what is the best case to search an element from an array?
The best-case performance for the Linear Search algorithm is when the search item appears at the beginning of the list and is O(1).


13) what is the worst case to search an element from an array?
The worst-case performance is when the search item appears at the end of the list or not at all.


14) what is tree in data structure?
A Tree is a non-linear data structure and a hierarchy consisting of a collection of nodes such that each node of the
tree stores a value and a list of references to other nodes.
This data structure is a specialized method to organize and store data in the computer to be used more effectively.
It consists of a central node, structural nodes, and sub-nodes, which are connected via edges. We can also say that
tree data structure has roots, branches, and leaves connected with one another.


15) what is graph in data structure?
A Graph is a non-linear data structure consisting of vertices and edges.
The vertices are sometimes also referred to as nodes and the edges are lines or arcs that connect any two nodes in the graph.


16) what is the difference between the HashTable and HashMap?
HashMap allows one null key and multiple null values.	Hashtable doesn't allow any null key or value.
HashMap is non synchronized. It is not-thread safe, Hashtable is synchronized. It is thread-safe and can be shared with many threads.
HashMap inherits AbstractMap class.	Hashtable inherits Dictionary class.


17) What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.
RDBMS = Array (i.e. Array of structures)
Network data model = Graph
Hierarchical data model = Trees


18) How HashMap works in java?
HashMap is a part of the Java collection framework. It uses a technique called Hashing. It implements the map interface.
It stores the data in the pair of Key and Value.


19) What is ArrayIndexOutOfBoundsException in java? When it occurs?
The ArrayIndexOutOfBoundsException is a runtime exception in Java that occurs when an array is accessed with an illegal index.
The index is either negative or greater than or equal to the size of the array.


20) What are the different ways of copying an array into another array?
Iterating each element of the given original array and copy one element at a time
Using clone() method
Using arraycopy() method
Using copyOf() method of Arrays class
Using copyOfRange() method of Arrays class


21) What is difference between an array and a linked list?
An array is a collection of elements of a similar data type.
A linked list is a collection of objects known as a node where node consists of two parts, i.e.,
data and address.
Array elements store in a contiguous memory location.
Linked list elements can be stored anywhere in the memory or randomly stored.
Array works with a static memory which means that the memory size is fixed.
The Linked list works with dynamic memory. which means that the memory size can be changed.
Array elements are independent of each other.
Linked list elements are dependent on each other.


22) What is DFS and BFS?
BFS stands for Breadth First Search. It is also known as level order traversal.
The Queue data structure is used for the Breadth First Search traversal.
When we use the BFS algorithm for the traversal in a graph, we can consider any node as a root node.
BFS stands for Breadth First Search. It is also known as level order traversal. The Queue data structure is used
for the Breadth First Search traversal.
When we use the BFS algorithm for the traversal in a graph, we can consider any node as a root node.


23) What is Recursion?
Recursion in java is a process in which a method calls itself continuously.
A method in java that calls itself is called recursive method.


24) What are linear and non linear data Structures?
A linear data structure is a structure in which the elements are stored sequentially,
and the elements are connected to the previous and the next element.
The types of linear data structures are Array, Queue, Stack, Linked List.
A non-linear data structure is also another type of data structure in which the data elements are not arranged in a contiguous manner.
so the data elements cannot be traversed or accessed in a single run.
In the case of linear data structure, element is connected to two elements (previous and the next element), whereas, in the non-linear
data structure, an element can be connected to more than two elements.
Trees and Graphs are the types of non-linear data structure.


25) What is Big-(O)-notation?
Big O Notation is a tool used to describe the time complexity of algorithms.
It calculates the time taken to run an algorithm as the input grows. In other words,
it calculates the worst-case time complexity of an algorithm.
Big O Notation in Data Structure describes the upper bound of an algorithm's runtime.



26) Outlined different kind of sorting algorithm with time complexity?
Algorithm		Time Complexity		Space Complexity
 	  		Best	   Average		Worst	      Worst
Selection Sort	Ω(n^2)	θ(n^2)	O(n^2)	O(1)
Bubble Sort		Ω(n)		θ(n^2)	O(n^2)	O(1)
Insertion Sort	Ω(n)		θ(n^2)	O(n^2)	O(1)
Heap Sort		Ω(n log(n))	θ(n log(n))	O(n log(n))	O(1)
Quick Sort		Ω(n log(n))	θ(n log(n))	O(n^2)	O(n)
Merge Sort		Ω(n log(n))	θ(n log(n))	O(n log(n))	O(n)
Bucket Sort		Ω(n +k)	θ(n +k)	O(n^2)	O(n)
Radix Sort		Ω(nk)		θ(nk)		O(nk)		O(n + k)
Count Sort		Ω(n +k)	θ(n +k)	O(n +k)	O(k)
Shell Sort		Ω(n log(n))	θ(n log(n))	O(n^2)	O(1)
Tim Sort		Ω(n)		θ(n log(n))	O(n log (n))O(n)
Tree Sort		Ω(n log(n))	θ(n log(n))	O(n^2)	O(n)
Cube Sort		Ω(n)		θ(n log(n))	O(n log(n))	O(n)

27) Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.
a) Best case time complexity of different data structures for different operations
Data structure		Access	Search	Insertion	Deletion
Array				O(1)		O(1)		O(1)		O(1)
Stack				O(1)		O(1)		O(1)		O(1)
Queue				O(1)		O(1)		O(1)		O(1)
Singly Linked list	O(1)		O(1)		O(1)		O(1)
Doubly Linked List	O(1)		O(1)		O(1)		O(1)
Hash Table			O(1)		O(1)		O(1)		O(1)
Binary Search Tree	O(log n)	O(log n)	O(log n)	O(log n)
AVL Tree			O(log n)	O(log n)	O(log n)	O(log n)
B Tree			O(log n)	O(log n)	O(log n)	O(log n)
Red Black Tree		O(log n)	O(log n)	O(log n)	O(log n)

b)Worst Case time complexity of different data structures for different operations
Data structure		Access	Search	Insertion	Deletion
Array				O(1)		O(N)		O(N)		O(N)
Stack				O(N)		O(N)		O(1)		O(1)
Queue				O(N)		O(N)		O(1)		O(1)
Singly Linked list	O(N)		O(N)		O(N)		O(N)
Doubly Linked List	O(N)		O(N)		O(1)		O(1)
Hash Table			O(N)		O(N)		O(N)		O(N)
Binary Search Tree	O(N)		O(N)		O(N)		O(N)
AVL Tree			O(log N)	O(log N)	O(log N)	O(log N)
Binary Tree			O(N)		O(N)		O(N)		O(N)
Red Black Tree		O(log N)	O(log N)	O(log N)	O(log N)